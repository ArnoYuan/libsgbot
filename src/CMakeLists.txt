PROJECT(libsgbot)

option(USE_ARM_NEON		"Set to support ARM NEON instructions"	OFF)
option(USE_OPENMP		"Set to support OpenMP feature"		ON)

IF(${USE_ARM_NEON} STREQUAL "ON")
  ADD_DEFINITIONS(-D_USE_ARM_NEON_)
  MESSAGE("Compile linear algebra with ARM NEON")
ELSE()
  ADD_DEFINITIONS(-D_USE_STD_ARITHMETIC_)
  MESSAGE("Compile linear algebra with STD arithmetic")
  #just for X86
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -O3 -ffast-math -fopenmp -msse3")
ENDIF()

IF(${USE_OPENMP} STREQUAL "ON")
  ADD_DEFINITIONS(-D_USE_OPENMP_)
  ADD_DEFINITIONS(-D_CPU_CORES_=4)
  MESSAGE("Compile with openmp feature!")
ENDIF()

FIND_PACKAGE(OpenMP REQUIRED)
IF(OPENMP_FOUND)
  MESSAGE("OPENMP FOUND")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
  SET(CMAKE_SHARE_LINKER_FLAGS "${CMAKE_SHARE_LINKER_FLAGS} ${OpenMP_SHARE_LINKER_FLAGS}")
ENDIF()

SET (ENV{SGBOT_LIBRARY_SRCS} "")

MACRO(SGBOT_ADD_SRCS)
  STRING(LENGTH "${ARGN}" NOTEMPTY)
  IF(NOTEMPTY)
    SET (ENV{SGBOT_LIBRARY_SRCS} "$ENV{SGBOT_LIBRARY_SRCS}${ARGN};" )
  ENDIF(NOTEMPTY) 
ENDMACRO(SGBOT_ADD_SRCS)

#Add sub source directories
ADD_SUBDIRECTORY(linear-algebra)
ADD_SUBDIRECTORY(std-math)
ADD_SUBDIRECTORY(transform)
ADD_SUBDIRECTORY(distribution)
ADD_SUBDIRECTORY(slam)

ADD_LIBRARY(sgbot SHARED $ENV{SGBOT_LIBRARY_SRCS})
SET_TARGET_PROPERTIES(sgbot PROPERTIES OUTPUT_NAME sgbot)
SET_TARGET_PROPERTIES(sgbot PROPERTIES CLEAN_DIRECT_OUTPUT 1)  
INSTALL_TARGETS(/lib sgbot)       

ADD_LIBRARY(sgbot-static STATIC $ENV{SGBOT_LIBRARY_SRCS})
SET_TARGET_PROPERTIES(sgbot-static PROPERTIES OUTPUT_NAME sgbot)
SET_TARGET_PROPERTIES(sgbot-static PROPERTIES CLEAN_DIRECT_OUTPUT 1)  
INSTALL_TARGETS(/lib sgbot-static)
